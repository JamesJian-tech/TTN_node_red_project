[{"id":"a02ef55d.717788","type":"tab","label":"TTN","disabled":false,"info":""},{"id":"7cd98435.9b010c","type":"ttn app","z":"","appId":"rak-au915-sensor","accessKey":"ttn-account-v2.bb2RN2j9ZT4VknL76rcVZak2OSNslW1aU08X6L82J2M","discovery":"discovery.thethingsnetwork.org:1900"},{"id":"2c95cf2d.34dd","type":"ttn uplink","z":"a02ef55d.717788","name":"","app":"7cd98435.9b010c","dev_id":"testboard","field":"","x":120,"y":140,"wires":[["a6d843ed.81697"]]},{"id":"a6d843ed.81697","type":"cayennelpp-decoder","z":"a02ef55d.717788","name":"","x":340,"y":220,"wires":[["48832b86.554164"]]},{"id":"48832b86.554164","type":"debug","z":"a02ef55d.717788","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":560,"y":180,"wires":[]},{"id":"57b52d74.84af14","type":"debug","z":"a02ef55d.717788","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":550,"y":580,"wires":[]},{"id":"56f56294.2fe26c","type":"cayennelpp-decoder","z":"a02ef55d.717788","name":"","x":350,"y":620,"wires":[["57b52d74.84af14","1b21f322.46d5ed"]]},{"id":"dd642fb8.6b5da","type":"ttn uplink","z":"a02ef55d.717788","name":"","app":"7cd98435.9b010c","dev_id":"testboard2","field":"","x":130,"y":540,"wires":[["56f56294.2fe26c"]]},{"id":"1b21f322.46d5ed","type":"json","z":"a02ef55d.717788","name":"","property":"payload","action":"","pretty":false,"x":560,"y":700,"wires":[["163758f.4c30ea7"]]},{"id":"163758f.4c30ea7","type":"debug","z":"a02ef55d.717788","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":770,"y":700,"wires":[]},{"id":"a0913776.06e8b8","type":"cayennelpp-decoder","z":"a02ef55d.717788","name":"","x":340,"y":460,"wires":[["e6cbc172.43d71"]]},{"id":"ff4f88bd.7be598","type":"ttn uplink","z":"a02ef55d.717788","name":"","app":"7cd98435.9b010c","dev_id":"rak-7003","field":"","x":120,"y":380,"wires":[["a0913776.06e8b8"]]},{"id":"e6cbc172.43d71","type":"debug","z":"a02ef55d.717788","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":540,"y":420,"wires":[]},{"id":"cfc7ef86.96bbb","type":"function","z":"a02ef55d.717788","name":"decodeCayenneLpp","func":"// https://github.com/FIWARE-GEs/iot-agent.LoraWAN/blob/bfbb71bb24eedbde3beaa610d92c551aa3e12d2d/lib/dataModels/cayenneLpp.js\n'use strict';\n\nconst CAYENNELPP_MAX_CHANNEL = 255;\nconst CAYENNELPP_MIN_SIZE_BYTES = 3;\n\nconst LPP_DIGITAL_INPUT = 0;\nconst LPP_DIGITAL_OUTPUT = 1;\nconst LPP_ANALOG_INPUT = 2;\nconst LPP_ANALOG_OUTPUT = 3;\nconst LPP_LUMINOSITY = 101;\nconst LPP_PRESENCE = 102;\nconst LPP_TEMPERATURE = 103;\nconst LPP_RELATIVE_HUMIDITY = 104;\nconst LPP_ACCELEROMETER = 113;\nconst LPP_BAROMETRIC_PRESSURE = 115;\nconst LPP_GYROMETER = 134;\nconst LPP_GPS = 136;\n\n\n\nmsg.payload = decodeCayenneLpp(msg.payload);\n\n\nconst LPP_DIGITAL_INPUT_NAME = 'digital_in';\nconst LPP_DIGITAL_OUTPUT_NAME = 'digital_out';\nconst LPP_ANALOG_INPUT_NAME = 'analog_in';\nconst LPP_ANALOG_OUTPUT_NAME = 'analog_out';\nconst LPP_LUMINOSITY_NAME = 'luminosity';\nconst LPP_PRESENCE_NAME = 'presence';\nconst LPP_TEMPERATURE_NAME = 'temperature';\nconst LPP_RELATIVE_HUMIDITY_NAME = 'relative_humidity';\nconst LPP_ACCELEROMETER_NAME = 'accelerometer';\nconst LPP_BAROMETRIC_PRESSURE_NAME = 'barometric_pressure';\nconst LPP_GYROMETER_NAME = 'gyrometer';\nconst LPP_GPS_NAME = 'gps';\n\nconst LPP_DIGITAL_INPUT_SIZE = 1; // 1 byte\nconst LPP_DIGITAL_OUTPUT_SIZE = 1; // 1 byte\nconst LPP_ANALOG_INPUT_SIZE = 2; // 2 bytes, 0.01 signed\nconst LPP_ANALOG_OUTPUT_SIZE = 2; // 2 bytes, 0.01 signed\nconst LPP_LUMINOSITY_SIZE = 2; // 2 bytes, 1 lux unsigned\nconst LPP_PRESENCE_SIZE = 1; // 1 byte, 1\nconst LPP_TEMPERATURE_SIZE = 2; // 2 bytes, 0.1°C signed\nconst LPP_RELATIVE_HUMIDITY_SIZE = 1; // 1 byte, 0.5% unsigned\nconst LPP_ACCELEROMETER_SIZE = 6; // 2 bytes per axis, 0.001G\nconst LPP_BAROMETRIC_PRESSURE_SIZE = 2; // 2 bytes 0.1 hPa Unsigned\nconst LPP_GYROMETER_SIZE = 6; // 2 bytes per axis, 0.01 °/s\nconst LPP_GPS_SIZE = 9; // 3 byte lon/lat 0.0001 °, 3 bytes alt 0.01 meter\n\nfunction decodeCayenneLpp(payload) {\n  var result = {};\n  var buffer = Buffer.from(payload, 'hex');\n  if (buffer && validateCayenneLppSize(buffer)) {\n    var cursor = 0;\n    var value;\n    var propertyName;\n    while (cursor < buffer.length) {\n      var channel = buffer.readUInt8(cursor);\n      if (validateCayenneLppChannel(channel)) {\n        cursor++;\n        var type = buffer[cursor];\n        cursor++;\n\n        switch (type) {\n          case LPP_DIGITAL_INPUT:\n\n            if (cursor + LPP_DIGITAL_INPUT_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n              value = buffer[cursor];\n              cursor++;\n              propertyName = LPP_DIGITAL_INPUT_NAME + '_' + channel.toString();\n              result[propertyName] = value;\n            }\n            break;\n          case LPP_DIGITAL_OUTPUT:\n            if (cursor + LPP_DIGITAL_OUTPUT_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n              value = buffer[cursor];\n              cursor++;\n              propertyName = LPP_DIGITAL_OUTPUT_NAME + '_' + channel.toString();\n              result[propertyName] = value;\n            }\n            break;\n          case LPP_ANALOG_INPUT:\n            if (cursor + LPP_ANALOG_INPUT_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n              value = buffer.readInt16BE(cursor) / 100.0;\n              cursor += 2;\n              propertyName = LPP_ANALOG_INPUT_NAME + '_' + channel.toString();\n              result[propertyName] = value;\n            }\n            break;\n          case LPP_ANALOG_OUTPUT:\n            if (cursor + LPP_ANALOG_OUTPUT_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n              value = buffer.readInt16BE(cursor) / 100.0;\n              cursor += 2;\n              propertyName = LPP_ANALOG_OUTPUT_NAME + '_' + channel.toString();\n              result[propertyName] = value;\n            }\n            break;\n          case LPP_LUMINOSITY:\n            if (cursor + LPP_LUMINOSITY_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n              value = buffer.readInt16BE(cursor);\n              cursor += 2;\n              propertyName = LPP_LUMINOSITY_NAME + '_' + channel.toString();\n              result[propertyName] = value;\n            }\n            break;\n          case LPP_PRESENCE:\n            if (cursor + LPP_PRESENCE_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n              value = buffer[cursor];\n              cursor++;\n              propertyName = LPP_PRESENCE_NAME + '_' + channel.toString();\n              result[propertyName] = value;\n            }\n            break;\n          case LPP_TEMPERATURE:\n            if (cursor + LPP_TEMPERATURE_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n              value = buffer.readInt16BE(cursor) / 10.0;\n              cursor += 2;\n              propertyName = LPP_TEMPERATURE_NAME + '_' + channel.toString();\n              result[propertyName] = value;\n            }\n            break;\n          case LPP_RELATIVE_HUMIDITY:\n            if (cursor + LPP_RELATIVE_HUMIDITY_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n              value = buffer[cursor] / 2.0;\n              cursor++;\n              propertyName = LPP_RELATIVE_HUMIDITY_NAME + '_' + channel.toString();\n              result[propertyName] = value;\n            }\n            break;\n          case LPP_ACCELEROMETER:\n            if (cursor + LPP_ACCELEROMETER_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n              var varAccX = buffer.readInt16BE(cursor) / 1000.0;\n              cursor += 2;\n              var varAccY = buffer.readInt16BE(cursor) / 1000.0;\n              cursor += 2;\n              var varAccZ = buffer.readInt16BE(cursor) / 1000.0;\n              cursor += 2;\n              value = {\n                x: varAccX,\n                y: varAccY,\n                z: varAccZ\n              };\n              propertyName = LPP_ACCELEROMETER_NAME + '_' + channel.toString();\n              result[propertyName] = value;\n            }\n            break;\n          case LPP_BAROMETRIC_PRESSURE:\n            if (cursor + LPP_BAROMETRIC_PRESSURE_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n              value = buffer.readInt16BE(cursor) / 10.0;\n              cursor += 2;\n              propertyName = LPP_BAROMETRIC_PRESSURE_NAME + '_' + channel.toString();\n              result[propertyName] = value;\n            }\n            break;\n          case LPP_GYROMETER:\n            if (cursor + LPP_GYROMETER_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n              var varX = buffer.readInt16BE(cursor) / 100.0;\n              cursor += 2;\n              var varY = buffer.readInt16BE(cursor) / 100.0;\n              cursor += 2;\n              var varZ = buffer.readInt16BE(cursor) / 100.0;\n              cursor += 2;\n              value = {\n                x: varX,\n                y: varY,\n                z: varZ\n              };\n              propertyName = LPP_GYROMETER_NAME + '_' + channel.toString();\n              result[propertyName] = value;\n            }\n            break;\n          case LPP_GPS:\n            if (cursor + LPP_GPS_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n              var latitude = readInt24BE(buffer, cursor) / 10000.0;\n              cursor += 3;\n              var longitude = readInt24BE(buffer, cursor) / 10000.0;\n              cursor += 3;\n              var altitude = readInt24BE(buffer, cursor) / 100.0;\n              cursor += 3;\n              value = {\n                latitude: latitude,\n                longitude: longitude,\n                altitude: altitude\n              };\n              propertyName = LPP_GPS_NAME + '_' + channel.toString();\n              result[propertyName] = value;\n            }\n            break;\n        }\n      } else {\n        throw new Error('Invalid CayennLpp channel');\n      }\n    }\n  } else {\n    throw new Error('Invalid CayennLpp buffer size');\n  }\n\n  return result;\n}\n\n/**\n * It validates the size of a CayenneLpp message\n *\n * @param      {<type>}   buffer  The buffer\n * @return     {boolean}  { description_of_the_return_value }\n */\nfunction validateCayenneLppSize(buffer) {\n  var result = false;\n  if (buffer && buffer.length >= CAYENNELPP_MIN_SIZE_BYTES) {\n    result = true;\n  }\n\n  return result;\n}\n\n/**\n * It validates the a CayenneLpp channel\n *\n * @param      {<type>}   buffer  The buffer\n * @return     {boolean}  { description_of_the_return_value }\n */\nfunction validateCayenneLppChannel(channel) {\n  var result = true;\n\n  if (channel > CAYENNELPP_MAX_CHANNEL) {\n    result = false;\n  }\n\n  return result;\n}\n\n/**\n * It reads an integer represented using 24 bits\n *\n * @param      {<type>}  buf     The buffer\n * @param      {number}  offset  The offset\n * @return     {<type>}  { description_of_the_return_value }\n */\nfunction readInt24BE(buf, offset) {\n  return buf.readIntBE(offset, 3);\n}\n\n\nreturn msg;","outputs":1,"noerr":0,"x":340,"y":100,"wires":[[]]}]